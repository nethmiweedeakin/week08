name: Frontend CD - Deploy to AKS

on:
  workflow_run:
    workflows: ["Frontend CI - Build & Push Image"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      product_api_ip:
        description: 'Product Service External IP'
        required: true
      order_api_ip:
        description: 'Order Service External IP'
        required: true
      aks_cluster_name:
        description: 'AKS Cluster Name'
        required: true
      aks_resource_group:
        description: 'Resource Group Name'
        required: true

jobs:
  deploy_frontend:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    environment: Production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Docker Login to ACR (via az acr login)
        run: az acr login --name ${{ secrets.AZURE_CONTAINER_REGISTRY }}

      - name: Inject Backend IPs into Frontend main.js
        run: |
          sed -i "s|_PRODUCT_API_URL_|${{ inputs.product_api_ip }}|g" frontend/main.js
          sed -i "s|_ORDER_API_URL_|${{ inputs.order_api_ip }}|g" frontend/main.js
          cat frontend/main.js

      - name: Build & Push Frontend Image
        run: |
          docker build -t ${{ secrets.AZURE_CONTAINER_REGISTRY }}/frontend:latest ./frontend/
          docker push ${{ secrets.AZURE_CONTAINER_REGISTRY }}/frontend:latest

      - name: Set Kubernetes context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ inputs.aks_resource_group }}
          cluster-name: ${{ inputs.aks_cluster_name }}

      - name: Deploy Frontend
        run: |
          cd k8s/
          kubectl apply -f frontend.yaml

      - name: Logout from Azure
        run: az logout
        if: always()
